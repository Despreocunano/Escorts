---
import Layout from '../../layouts/Layout.astro';
import { ModelsService } from '../../services/models.service';
import ModelProfile from '../../components/model-detail/ModelProfile';
import ModelDetails from '../../components/model-detail/ModelDetails';
import ModelGallery from '../../components/model-detail/ModelGallery';
import OnlineStatusIndicator from '../../components/OnlineStatusIndicator';

export async function getStaticPaths() {
  try {
    const modelsService = ModelsService.getInstance();
    const models = await modelsService.getAllModels();

    return models.map(model => ({
      params: { id: model.id }
    }));
  } catch (error) {
    console.error('Error fetching model paths:', error);
    return [];
  }
}

const { id } = Astro.params;
let model = null;
let error = null;

try {
  const modelsService = ModelsService.getInstance();
  model = await modelsService.getModelById(id);
} catch (e) {
  error = e;
  console.error('Error fetching model:', e);
}

if (!model && !error) {
  return Astro.redirect('/404');
}
---

<Layout title={model ? `${model.name} - Scort ${model.model_category} en ${model.area}` : 'Error'}>
  {error && (
    <div class="min-h-screen flex items-center justify-center px-6">
      <p class="text-gray-400">Error al cargar los detalles del modelo.</p>
    </div>
  )}

  {model && (
    <div class="min-h-screen bg-black text-white pt-36 pb-12">
      <div class="max-w-[1200px] mx-auto px-6">
        <div class="flex flex-col md:flex-row gap-12 items-start mb-24">
          <ModelProfile model={model} client:load />
          <div class="flex-grow">
            <div class="flex items-center gap-3 mb-6">
              <div class="flex items-center">
                <h1 class="text-3xl font-medium">{model.name}</h1>
                {model.age && (
                  <>
                    <span class="mx-3 text-[#9F8E6A] text-3xl">•</span>
                    <span class="text-gray-400 text-2xl">{model.age} años</span>
                  </>
                )}
              </div>
              <OnlineStatusIndicator 
                modelId={model.id} 
                initialIsOnline={model.is_online} 
                showText={true}
                client:load
              />
            </div>
            <ModelDetails model={model} client:load />
          </div>
        </div>

        <ModelGallery model={model} client:load />
      </div>
    </div>
  )}
</Layout>

<script>
  // Handle video loading and playback
  document.querySelectorAll('video').forEach((video, index) => {
    const overlay = document.querySelector(`[data-overlay="${index}"]`);
    const playButton = document.querySelector(`[data-play-button="${index}"]`);
    const playIcon = document.querySelector(`[data-play-icon="${index}"]`);
    const pauseIcon = document.querySelector(`[data-pause-icon="${index}"]`);
    
    if (!overlay || !playButton || !playIcon || !pauseIcon) return;

    // Function to toggle play/pause
    const togglePlayPause = () => {
      if (video.paused) {
        video.play();
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
        overlay.classList.add('opacity-0');
      } else {
        video.pause();
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        overlay.classList.remove('opacity-0');
      }
    };

    // Add click handlers
    playButton.addEventListener('click', (e) => {
      e.stopPropagation();
      togglePlayPause();
    });

    video.addEventListener('click', () => {
      togglePlayPause();
    });

    // Handle video end
    video.addEventListener('ended', () => {
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      overlay.classList.remove('opacity-0');
    });
  });
</script>