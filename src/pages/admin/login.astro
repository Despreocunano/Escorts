---
import Layout from '../../layouts/Layout.astro';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Check if user is already authenticated and is admin
const { data: { session } } = await supabase.auth.getSession();
const { data: adminData } = session ? await supabase
  .from('admins')
  .select('*')
  .eq('id', session.user.id)
  .single() : { data: null };

// If authenticated and admin, redirect to admin panel
if (session && adminData) {
  return Astro.redirect('/admin');
}
---

<Layout title="Admin Login">
  <div class="min-h-screen flex items-center justify-center px-6 bg-gray-900">
    <div class="w-full max-w-md">
      <h1 class="text-2xl font-light text-white text-center mb-8">Admin Login</h1>
      
      <form id="loginForm" class="bg-black/50 rounded-lg p-8">
        <div class="mb-6">
          <label for="email" class="block text-gray-300 mb-2">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full bg-gray-800 text-white border border-gray-700 rounded px-4 py-2 focus:outline-none focus:border-[#9F8E6A]"
          />
        </div>
        
        <div class="mb-6">
          <label for="password" class="block text-gray-300 mb-2">Contraseña</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            class="w-full bg-gray-800 text-white border border-gray-700 rounded px-4 py-2 focus:outline-none focus:border-[#9F8E6A]"
          />
        </div>

        <button
          type="submit"
          class="w-full bg-[#9F8E6A] hover:bg-[#8A7A5C] text-white py-2 rounded transition-colors"
        >
          Iniciar Sesión
        </button>

        <p id="errorMessage" class="mt-4 text-red-400 text-center hidden"></p>
      </form>
    </div>
  </div>
</Layout>

<script>
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
)

  const form = document.getElementById('loginForm');
  const errorMessage = document.getElementById('errorMessage');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) throw error;

      // Check if user is admin
      const { data: adminData, error: adminError } = await supabase
        .from('admins')
        .select('*')
        .eq('id', data.user.id)
        .single();

      if (adminError || !adminData) {
        await supabase.auth.signOut();
        throw new Error('No tienes permisos de administrador');
      }

      // Redirect to admin panel
      window.location.href = '/admin';
    } catch (error) {
      if (errorMessage) {
        errorMessage.textContent = error instanceof Error ? error.message : 'An error occurred';
        errorMessage.classList.remove('hidden');
      }
    }
  });
</script>